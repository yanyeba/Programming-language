"""
比较运算符和逻辑运算符

比较运算符有的地方也称为关系运算符，包括`==`、`!=`、`<`、`>`、`<=`、`>=`，我相信没有什么好解释的，

大家一看就能懂，唯一需要提醒的是比较相等用的是`==`，请注意这个地方是两个等号，因为`=`是赋值运算符，
我们在上面刚刚讲到过，`==`才是比较相等的比较运算符。比较运算符会产生布尔值，要么是`True`要么是`False`。

逻辑运算符有三个，分别是`and`、`or`和`not`。`and`字面意思是“而且”，

所以`and`运算符会连接两个布尔值，如果两个布尔值都是`True`，那么运算的结果就是`True`；
左右两边的布尔值有一个是`False`，最终的运算结果就是`False`。相信大家已经想到了，
如果`and`左边的布尔值是`False`，不管右边的布尔值是什么，最终的结果都是`False`，
所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在`and`运算符左边为`False`的情况下，
右边的表达式根本不会执行。

`or`字面意思是“或者”，所以`or`运算符也会连接两个布尔值，
如果两个布尔值有任意一个是`True`，那么最终的结果就是`True`。
当然，`or`运算符也是有短路功能的，在它左边的布尔值为`True`的情况下，右边的表达式根本不会执行。

`not`运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是`True`运算结果就是`False`，
而后面的布尔值如果是`False`则运算结果就是`True`。
"""

flag0 = 1 == 1  # ture
flag1 = 3 > 2   # ture
flag1 = 2 < 1    #false
falg3 = flag1 and flag2  # false
flag4 = flag1 or flag2    # ture
flag5 = not (1 !=2 )     # false

print('flag0 =', flag0)    # flag0 = True
print('flag1 =', flag1)    # flag1 = True
print('flag2 =', flag2)    # flag2 = False
print('flag3 =', flag3)    # flag3 = False
print('flag4 =', flag4)    # flag4 = True
print('flag5 =', flag5)    # flag5 = False

'''
**说明**：比较运算符的优先级高于赋值运算符，所以`flag0 = 1 == 1`先做`1 == 1`产生布尔值`True`，
再将这个值赋值给变量`flag0`。`print`函数可以输出多个值，多个值之间可以用`,`进行分隔，输出的内容之间默认以空格分开。
'''
